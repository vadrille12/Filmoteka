{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,gDAGA,MAAMC,EAAaC,SAASC,cAAc,qBAEpCC,EAAWF,SAASC,cAAc,mBA0DtBD,SAASC,cAAc,kBACzBD,SAASC,cAAc,qBADvC,MAEME,EAAmBH,SAASC,cAAc,wBAC1CG,EAAaJ,SAASC,cAAc,oBAKpCI,EAAkBC,KAAKC,MAC3BC,aAAaC,QAHmB,mBAM5BC,EAAgBJ,KAAKC,MAAMC,aAAaC,QALd,iBAM1BE,EAAcN,EAAgBO,OAAOF,GAEjBC,EAAYE,QACpC,CAACC,EAAMC,EAAOC,IAAUA,EAAMC,QAAQH,KAAUC,IAsD3C,SAASG,IAId,GAH+B,IAA3Bb,EAAgBc,SAClB,EAAAC,EAAAC,gBAEEV,EAAYQ,OAAS,EAAG,CAC1B,MAAMG,EAAkBhB,KAAKC,MAC3BC,aAAaC,QAtEe,mBAwE9Bc,QAAQC,IAAIF,GACZnB,EAAiBsB,UAAY,GAE7B,IACEC,EAAwBJ,E,CACxB,MAAOK,GACPJ,QAAQC,IAAIG,EAAMC,Q,GAsBxB,SAASC,EAAUC,GACjB,OAAOA,EAAUC,KAAIC,GAASxB,aAAaC,QAAQuB,KAAQC,KAAK,K,CAIlE,SAASP,EAAwBZ,GAE/B,IAAIoB,EAAa,GACbC,EAAc,IAClB,EAAAtC,EAAAuC,aACA,MAAMC,EAAoBvB,EACvBiB,KACC,EAACO,YACCA,EAAWC,MACXA,EACAC,UAAWC,EAAMC,aACjBA,EAAe,GAAEC,aACjBA,EAAe,GAAEC,GACjBA,MAEIH,EAAOtB,OAAS,IAClBsB,EAAOI,OAAO,EAAGJ,EAAOtB,OAAS,GAEjCe,EAAaL,EAAUY,GACvBP,GAA0B,WAG5BA,EAAaL,EAAUY,GAEnBP,EAAWf,OAAS,KACtBsB,EAAOK,MAEPZ,EAAaL,EAAUY,GACvBP,GAA0B,WAGN,IAAlBO,EAAOtB,SACTe,EAAa,oBAGfC,EAAcO,EAAaK,MAAM,EAAG,GAChB,KAAhBZ,IACFA,EAAc,wBAGXG,EAgBI,WAAWM,yFAEAN,uHAIOC,oFAEKL,6CACJC,iDACIQ,EAAaK,QAAQ,sDAzB5C,YAAYJ,sEAEZK,2HAIkBV,oFAEKL,6CACJC,iDACIQ,EAAaK,QAAQ,yDAsBxDf,KAAK,IACR9B,EAAiBsB,UAAYY,C,CAtK/BX,EAAwBrB,GAExB6C,EAAAC,KAAKC,cAAcC,iBAAiB,SAASC,IAC3C,MAAMC,EAAcC,OAAOF,EAAEG,OAAOC,QAAQd,IAStCe,EAAkBtD,EAAgBuD,MAAKC,IAC3C,GAAIN,IAAgBM,EAAKjB,GAEvB,OAAOiB,CAAI,IAIftC,QAAQC,IAAImC,EAAgBf,IAE5B,MAAMkB,EAAmBzD,EAAgBQ,QAAOgD,IAC9C,GAAIF,EAAgBf,KAAOiB,EAAKjB,GAE9B,OAAOiB,CAAI,IAKftC,QAAQC,IAAIsC,GAMZpC,EAAwBoC,EAAiB,IAI3C/D,EAAWsD,iBAAiB,QAASnC,GACrCK,QAAQC,IAAIzB,GACZG,EAASmD,iBAAiB,SA6B1B,WAC+B,IAAzB3C,EAAcS,SAChB,EAAAC,EAAAC,gBAEF,GAAIV,EAAa,CACf,MAAMoD,EAAgBzD,KAAKC,MACzBC,aAAaC,QAxFa,iBA0F5BN,EAAiBsB,UAAY,GAC7B,IACEC,EAAwBqC,E,CACxB,MAAOpC,GACPJ,QAAQC,IAAIG,EAAMC,Q,MAxCxBxB,EAAWiD,iBAAiB,QAASnC,GAErC8C,OAAOC,OAAS/C,IA+ChBK,QAAQC,IAAI","sources":["src/js/watched.js"],"sourcesContent":["import { waitingLi } from './modalMovie';\nimport { emptyLibrary } from './library';\nimport { refs } from './refs';\nconst watchedBtn = document.querySelector('.watched-list-btn');\n\nconst queueBtn = document.querySelector('.queue-list-btn');\n\n// watchedBtn.addEventListener('click', onWatched);\n// queueBtn.addEventListener('click', onQueueBtn);\n\n// function onWatched() {\n//   watchedBtn.classList.add('js-active');\n//   queueBtn.classList.remove('js-active');\n// }\n// function onQueueBtn() {\n//   queueBtn.classList.add('js-active');\n//   watchedBtn.classList.remove('js-active');\n\n// }\n\n// // создание\n\nimport { API_KEY, BASE_URL, TREND_URL, SEARCH_URL } from './api-vars.js';\n\nfunction createLibraryMarkup({\n  genres,\n  poster_path,\n  title,\n  release_date,\n  id,\n  vote_average,\n}) {\n  let genresArr = [];\n  genres.map(genre => genresArr.push(genre.name));\n  if (genresArr.length > 3) {\n    const changedArr = genresArr.slice(0, 2);\n    changedArr.push('Other');\n    genresArr = changedArr;\n  }\n  const genresStr = genresArr.join(', ');\n  const year = release_date.slice(0, 4);\n  const rating = vote_average.toFixed(1);\n  return `<li class=\"grid__item film-card \">\n        <a href=\"#\" data-id=\"${id}\" class=\"list\">\n          <div class=\"film-card__thumb\">\n            <img\n              class=\"film-card__img\"\n              src=\"${API_KEY}${poster_path}\"\n              alt=\"Movie poster\"\n              loading=\"lazy\"\n              id=${id}\n            />\n          </div>\n          <h2 class=\"film-card__header\">${title}</h2>\n        </a>\n        <p class=\"film-card__genres\">${genresStr}</p>\n        <span class=\"film-card__year\">${year}</span>\n        <span class=\"film-card__rating\">${rating}</span>\n      </li>`;\n}\n\n// рендер\n//const emptyLibrary = document.querySelector('.empty-library');\nconst container = document.querySelector('.empty-library');\nconst listLib = document.querySelector('.film-list-lib-js');\nconst listCardsLibrary = document.querySelector('.card__list--library');\nconst libraryBtn = document.querySelector('.library-default');\n// console.log(listCardsLibrary);\n\nconst LOCAL_STORAGE_KEY_WATCHED = 'watched-movies';\nconst LOCAL_STORAGE_KEY_QUEUE = 'queue-movies';\nconst saveDataWatched = JSON.parse(\n  localStorage.getItem(LOCAL_STORAGE_KEY_WATCHED)\n);\n\nconst saveDataQueue = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_QUEUE));\nconst saveDataAll = saveDataWatched.concat(saveDataQueue);\n\nconst savedDataAllQniue = saveDataAll.filter(\n  (data, index, array) => array.indexOf(data) === index\n);\n\nrenderMoviesFromLibrary(saveDataWatched);\n\nrefs.addWatchedBtn.addEventListener('click', e => {\n  const forDeleteId = Number(e.target.dataset.id);\n  // console.log(forDeleteId);\n\n  // const forRemovingFilm = saveDataWatched.filter(film => {\n  //   if (forDeleteId === film.id) {\n  //     console.log(film);\n  //   }\n  // });\n\n  const forRemovingFilm = saveDataWatched.find(film => {\n    if (forDeleteId === film.id) {\n      // console.log(film);\n      return film;\n    }\n  });\n\n  console.log(forRemovingFilm.id);\n\n  const arrActualLibrary = saveDataWatched.filter(film => {\n    if (forRemovingFilm.id !== film.id) {\n      // console.log(film);\n      return film;\n    }\n    // console.log(film.id);\n  });\n\n  console.log(arrActualLibrary);\n\n  // let arrRemovedFilm = [];\n  // arrRemovedFilm.push(forRemovingFilm);\n  // console.log(arrRemovedFilm);\n\n  renderMoviesFromLibrary(arrActualLibrary);\n  // console.log(saveDataWatched);\n});\n\nwatchedBtn.addEventListener('click', onWatchedClick);\nconsole.log(watchedBtn);\nqueueBtn.addEventListener('click', onQueueClick);\nlibraryBtn.addEventListener('click', onWatchedClick);\n\nwindow.onload = onWatchedClick() \n// if (!savedDataAllQniue.length) {\n//   emptyLibrary.classList.remove('is-hidden');\n// }\n\nimport { renderTrendingMovies } from './filmCard';\n\nexport function onWatchedClick() {\n  if (saveDataWatched.length === 0) {\n    emptyLibrary();\n  }\n  if (saveDataAll.length > 0) {\n    const saveDataWatched = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY_WATCHED)\n    );\n    console.log(saveDataWatched);\n    listCardsLibrary.innerHTML = '';\n\n    try {\n      renderMoviesFromLibrary(saveDataWatched);\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n}\n\nfunction onQueueClick() {\n  if (saveDataQueue.length === 0) {\n    emptyLibrary();\n  }\n  if (saveDataAll) {\n    const saveDataQueue = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY_QUEUE)\n    );\n    listCardsLibrary.innerHTML = '';\n    try {\n      renderMoviesFromLibrary(saveDataQueue);\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n}\n\nfunction getGenres(genresArr) {\n  return genresArr.map(genre => localStorage.getItem(genre)).join(', ');\n}\n\nconsole.log('heloo');\nfunction renderMoviesFromLibrary(data) {\n  const urlImage = 'https://image.tmdb.org/t/p/w500/';\n  let genresName = '';\n  let releaseYear = '';\n  waitingLi();\n  const cardMarkupLibrary = data\n    .map(\n      ({\n        poster_path,\n        title,\n        genre_ids: genres,\n        release_date = '',\n        vote_average = '',\n        id,\n      }) => {\n        if (genres.length > 3) {\n          genres.splice(3, genres.length - 3);\n\n          genresName = getGenres(genres);\n          genresName = genresName + ', other';\n        }\n\n        genresName = getGenres(genres);\n\n        if (genresName.length > 24) {\n          genres.pop();\n\n          genresName = getGenres(genres);\n          genresName = genresName + ', other';\n        }\n\n        if (genres.length === 0) {\n          genresName = 'genre is unknown';\n        }\n\n        releaseYear = release_date.slice(0, 4);\n        if (releaseYear === '') {\n          releaseYear = 'release date unknown';\n        }\n\n        if (!poster_path) {\n          return `<li  id=\"${id}\" class=\"movie__card\">\n        <img width=\"100%\"\n          src=\"${photo}\"\n          class=\"movie__cover\"\n        />\n        <div class=\"movie__info\">\n        <h2 class=\"movie__title\">${title}</h2>\n        <div class=\"movie__item\">\n          <h3 class=\"movie__category\">${genresName}</h3>\n          <h3 class=\"movie__year\">${releaseYear}</h3>\n          <div class=\"movie__average\">${vote_average.toFixed(1)}</div>\n        </div>\n      </div>\n      </li>`;\n        } else {\n          return `<li id=\"${id}\" class=\"movie__card\">\n        <img\n          src=\"${urlImage}${poster_path}\"\n          class=\"movie__cover\"\n        />\n        <div class=\"movie__info\">\n        <h2 class=\"movie__title\">${title}</h2>\n        <div class=\"movie__item\">\n          <h3 class=\"movie__category\">${genresName}</h3>\n          <h3 class=\"movie__year\">${releaseYear}</h3>\n          <div class=\"movie__average\">${vote_average.toFixed(1)}</div>\n        </div>\n      </div>\n      </li>`;\n        }\n      }\n    )\n    .join('');\n  listCardsLibrary.innerHTML = cardMarkupLibrary;\n}\n"],"names":["$bnGUG","parcelRequire","$7126a8cfa5cf9b17$var$watchedBtn","document","querySelector","$7126a8cfa5cf9b17$var$queueBtn","$7126a8cfa5cf9b17$var$listCardsLibrary","$7126a8cfa5cf9b17$var$libraryBtn","$7126a8cfa5cf9b17$var$saveDataWatched","JSON","parse","localStorage","getItem","$7126a8cfa5cf9b17$var$saveDataQueue","$7126a8cfa5cf9b17$var$saveDataAll","concat","filter","data","index","array","indexOf","$7126a8cfa5cf9b17$export$e05168f1715314ac","length","$2sH7u","emptyLibrary","saveDataWatched1","console","log","innerHTML","$7126a8cfa5cf9b17$var$renderMoviesFromLibrary","error","message","$7126a8cfa5cf9b17$var$getGenres","genresArr","map","genre","join","genresName","releaseYear","waitingLi","cardMarkupLibrary","poster_path","title","genre_ids","genres","release_date","vote_average","id","splice","pop","slice","toFixed","photo","$krGWQ","refs","addWatchedBtn","addEventListener","e","forDeleteId","Number","target","dataset","forRemovingFilm","find","film","arrActualLibrary","saveDataQueue1","window","onload"],"version":3,"file":"library.fd823e0a.js.map"}