{"mappings":"YAAA,IACMA,EAAW,+BCDXC,GDEY,GAAYC,OAATF,EAAS,wBACX,GAAYE,OAATF,EAAS,iBACX,GAAYE,OAATF,EAAS,UCJbG,SAASC,cAAc,sBACpCC,EAAWF,SAASC,cAAc,mBAkBxC,SAASE,EAAoBC,G,IAC3BC,EAD2BD,EAC3BC,OACAC,EAF2BF,EAE3BE,YACAC,EAH2BH,EAG3BG,MACAC,EAJ2BJ,EAI3BI,aACAC,EAL2BL,EAK3BK,GACAC,EAN2BN,EAM3BM,aAEIC,EAAY,GAGhB,GAFAN,EAAOO,KAAI,SAACC,G,OACVF,EAAUG,KAAKD,EAAME,K,IACnBJ,EAAUK,OAAS,EAAG,CACxB,IAAMC,EAAaN,EAAUO,MAAM,EAAG,GACtCD,EAAWH,KAAK,SAChBH,EAAYM,C,CAEd,IAAME,EAAYR,EAAUS,KAAK,MAC3BC,EAAOb,EAAaU,MAAM,EAAG,GAC7BI,EAASZ,EAAaa,QAAQ,GACpC,MAAO,oEAKYxB,OAJUU,EAAG,0IAIHV,OD3Cf,oCC8CGA,OAHYO,EAAY,wFAMDP,OAHvBU,EAAG,gFAKiBV,OAFGQ,EAAM,8DAGRR,OADDoB,EAAU,gDAEPpB,OADFsB,EAAK,qDACItB,OAAPuB,EAAO,uB,CAlDjDxB,EAAW0B,iBAAiB,SAG5B,WACI1B,EAAW2B,UAAUC,IAAI,aACzBxB,EAASuB,UAAUE,OAAO,Y,IAJ9BzB,EAASsB,iBAAiB,SAM1B,WACItB,EAASuB,UAAUC,IAAI,aACvB5B,EAAW2B,UAAUE,OAAO,Y,IA8ChC,IAAMC,EAAe5B,SAASC,cAAc,kBACtC4B,EAAU7B,SAASC,cAAc,qBAEjC6B,EAA4B,iBAC5BC,EAA0B,eAC1BC,EAAkBC,KAAKC,MAC3BC,aAAaC,QAAQN,IAEjBO,EAAgBJ,KAAKC,MAAMC,aAAaC,QAAQL,IAChDO,EAAcN,EAAgBjC,OAAOsC,GACrCE,EAAoBD,EAAYE,QACpC,SAACC,EAAMC,EAAOC,G,OAAUA,EAAMC,QAAQH,KAAUC,C,KAa3C,WACL,GAAIJ,EACF,IAEEC,EAAkB3B,KAAI,SAAAH,GACpBoC,MAAMC,eAAerC,GAAIsC,MAAK,SAAAC,GAC5B,IAAMC,EAAS9C,EAAoB6C,GACnCnB,EAAQqB,mBAAmB,YAAaD,E,OAG5C,MAAOE,GACPC,QAAQC,IAAIF,EAAMG,Q,EApBxBC,GAEAzD,EAAW0B,iBAAiB,SAuB5B,WACE,GAAIc,EAAa,CACb,IAAMkB,EAAkBvB,KAAKC,MAAMC,aAAaC,QAAQN,IACxDD,EAAQ4B,UAAY,GACpB,IAEAD,EAAgB5C,KAAI,SAAAH,GAClBoC,MAAMC,eAAerC,GAAIsC,MAAK,SAAAC,GAC5B,IAAMC,EAAS9C,EAAoB6C,GACnCnB,EAAQqB,mBAAmB,YAAaD,E,OAG5C,MAAOE,GACPC,QAAQC,IAAIF,EAAMG,Q,MAnCxBpD,EAASsB,iBAAiB,SAwC1B,WACE,GAAIc,EAAa,CACb,IAAMoB,EAAgBzB,KAAKC,MAAMC,aAAaC,QAAQL,IACpDF,EAAQ4B,UAAY,GACxB,IAEEC,EAAc9C,KAAI,SAAAH,GAChBoC,MAAMC,eAAerC,GAAIsC,MAAK,SAAAC,GAC5B,IAAMC,EAAS9C,EAAoB6C,GACnCnB,EAAQqB,mBAAmB,YAAaD,E,OAG5C,MAAOE,GACPC,QAAQC,IAAIF,EAAMG,Q,MAnDnBf,EAAkBvB,QACrBY,EAAaH,UAAUE,OAAO,Y","sources":["src/js/api-vars.js","src/js/watched.js"],"sourcesContent":["const API_KEY = '8b20680c766bc5c37143e5d6b7aa7894';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nconst TRAILER_URL = `${BASE_URL}/movie`;\nexport { API_KEY, BASE_URL, TREND_URL, SEARCH_URL, TRAILER_URL };\n","const watchedBtn = document.querySelector('.watched-list-btn');\nconst queueBtn = document.querySelector('.queue-list-btn');\n\nwatchedBtn.addEventListener('click', onWatched);\nqueueBtn.addEventListener('click', onQueueBtn);\n\nfunction onWatched() {\n    watchedBtn.classList.add('js-active');\n    queueBtn.classList.remove('js-active');\n}\nfunction onQueueBtn() {\n    queueBtn.classList.add('js-active');\n    watchedBtn.classList.remove('js-active');\n}\n\n// // создание \n\nimport { API_KEY, BASE_URL, TREND_URL, SEARCH_URL } from './api-vars.js';\n\nfunction createLibraryMarkup({\n  genres,\n  poster_path,\n  title,\n  release_date,\n  id,\n  vote_average\n}) {\n  let genresArr = [];\n  genres.map((genre) =>\n    genresArr.push(genre.name));\n  if (genresArr.length > 3) {\n    const changedArr = genresArr.slice(0, 2);\n    changedArr.push('Other');\n    genresArr = changedArr;\n  }\n  const genresStr = genresArr.join(', ');\n  const year = release_date.slice(0, 4);\n  const rating = vote_average.toFixed(1);\n  return `<li class=\"grid__item film-card \">\n        <a href=\"#\" data-id=\"${id}\" class=\"list\">\n          <div class=\"film-card__thumb\">\n            <img\n              class=\"film-card__img\"\n              src=\"${API_KEY}${poster_path}\"\n              alt=\"Movie poster\"\n              loading=\"lazy\"\n              id=${id}\n            />\n          </div>\n          <h2 class=\"film-card__header\">${title}</h2>\n        </a>\n        <p class=\"film-card__genres\">${genresStr}</p>\n        <span class=\"film-card__year\">${year}</span>\n        <span class=\"film-card__rating\">${rating}</span>\n      </li>`;\n}\n\n// рендер\nconst emptyLibrary = document.querySelector('.empty-library');\nconst listLib = document.querySelector('.film-list-lib-js');\n\nconst LOCAL_STORAGE_KEY_WATCHED = 'watched-movies';\nconst LOCAL_STORAGE_KEY_QUEUE = 'queue-movies';\nconst saveDataWatched = JSON.parse(\n  localStorage.getItem(LOCAL_STORAGE_KEY_WATCHED)\n);\nconst saveDataQueue = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_QUEUE));\nconst saveDataAll = saveDataWatched.concat(saveDataQueue);\nconst savedDataAllQniue = saveDataAll.filter(\n  (data, index, array) => array.indexOf(data) === index\n);\n\n\ninit();\n\nwatchedBtn.addEventListener('click', onWatchedClick);\nqueueBtn.addEventListener('click', onQueueClick);\n\nif (!savedDataAllQniue.length) {\n  emptyLibrary.classList.remove('is-hidden');\n}\n\nexport function init() {\n  if (saveDataAll) {\n    try {\n      \n      savedDataAllQniue.map(id => {\n        fetch.getFilmDetails(id).then(promise => {\n          const markup = createLibraryMarkup(promise);\n          listLib.insertAdjacentHTML('beforeend', markup);\n        });\n      });\n    } catch (error) {\n      console.log(error.message);\n    } \n  }\n}\n\nfunction onWatchedClick() {\n  if (saveDataAll) {\n      const saveDataWatched = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_WATCHED));\n      listLib.innerHTML = '';\n      try {\n      \n      saveDataWatched.map(id => {\n        fetch.getFilmDetails(id).then(promise => {\n          const markup = createLibraryMarkup(promise);\n          listLib.insertAdjacentHTML('beforeend', markup);\n        });\n      });\n    } catch (error) {\n      console.log(error.message);\n    } \n  }\n}\n\nfunction onQueueClick() {\n  if (saveDataAll) {\n      const saveDataQueue = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_QUEUE));\n        listLib.innerHTML = '';\n    try {\n     \n      saveDataQueue.map(id => {\n        fetch.getFilmDetails(id).then(promise => {\n          const markup = createLibraryMarkup(promise);\n          listLib.insertAdjacentHTML('beforeend', markup);\n        });\n      });\n    } catch (error) {\n      console.log(error.message);\n    } \n  }\n}\n"],"names":["$78277164f899cbaf$export$ca6dda5263526f75","$a215baf1061f969f$var$watchedBtn","concat","document","querySelector","$a215baf1061f969f$var$queueBtn","$a215baf1061f969f$var$createLibraryMarkup","param","genres","poster_path","title","release_date","id","vote_average","genresArr","map","genre","push","name","length","changedArr","slice","genresStr","join","year","rating","toFixed","addEventListener","classList","add","remove","$a215baf1061f969f$var$emptyLibrary","$a215baf1061f969f$var$listLib","$a215baf1061f969f$var$LOCAL_STORAGE_KEY_WATCHED","$a215baf1061f969f$var$LOCAL_STORAGE_KEY_QUEUE","$a215baf1061f969f$var$saveDataWatched","JSON","parse","localStorage","getItem","$a215baf1061f969f$var$saveDataQueue","$a215baf1061f969f$var$saveDataAll","$a215baf1061f969f$var$savedDataAllQniue","filter","data","index","array","indexOf","fetch","getFilmDetails","then","promise","markup","insertAdjacentHTML","error","console","log","message","$a215baf1061f969f$export$2cd8252107eb640b","saveDataWatched1","innerHTML","saveDataQueue1"],"version":3,"file":"library.1334f23e.js.map"}